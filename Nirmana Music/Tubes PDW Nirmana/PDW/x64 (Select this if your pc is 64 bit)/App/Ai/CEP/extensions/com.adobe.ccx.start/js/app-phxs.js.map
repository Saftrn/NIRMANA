{"version":3,"sources":["app-phxs.js"],"names":["iaw","apps","phxs","init","receivedHostData","mode","cepUtil","evalExtendScript","supportDataJSON","hostData","jsData","buildHostJSON","JSON","parse","json","fnftDataReceiver","err","log","exception","message","localstorage","setUserItem","initPresets","hostID","applicationID","presets","buildHostPresetJSON","supportData","phsxEnvInfo","envInfo","userData","appVersion","platform","displayMode","sessionGUID","userTrackingEnabled","language","locale","countryCode","adobeGUID","userGUID","accountStatus","subscription","accountType","fnftSettings","this","getFNFTData","store","set","fnftConfigInfo","firstName","lastName","tabs","getFileTabs","appStartClockTime","secondsLeftInTrial","dontShowAgain","startDSA","buttonInfo","fnftEnabled","stringify","get","getPresetArray","pixelAspectRatios","configInfo","pixelScaleFactorList","map","item","index","label","name","util","roundDecimal","value","settings","docSizeBounds","units","resolutionUnits","colorModes","values","backgroundValues","backgroundColor","pointsPerInch","defaultDocumentName","defaultNewDocName","colorProfileLists","colorSettings","defaultPresetSettings","startingPreset","tabsArray","recentFiles","type","listViewEnabled","thumbnailViewEnabled","list","push","presetArray","mruArray","getRecentlyUsedPresets","mruTemplates","recentlyUsedTemplates","mruIndex","length","template_category","concat","sort","a","b","lastUsedTime","psPresets","sections","tmpCatToSec","category","catIndex","sectIndex","section","addPsPresetListToCCXPresetEntryList","mruPresets","mru","thumbnailForPreset","title","convertPsPresetToCCXPresetEntry","psPreset","presetEntry","isPreset","id","thumbnail_url","mime_type","price_prompt","previews","resolution","screenPresetResolution","printPresetResolution","group","ccxPresetArray","presetIndex","unshift","promptForCustomColor","color","colorJSON","serializedParams","_color","dialogContext","i18n","getLocalizedString","Object","red","grain","blue","replace","Promise","resolve","reject","resultJSON","result","e","Error","convertColorToRGB","rgbFormat","obj","Math","round","undefined","green"],"mappings":"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","file":"app-phxs.js","sourcesContent":["/**************************************************************************\n * ADOBE CONFIDENTIAL\n * ___________________\n *\n *  Copyright 2015 Adobe Systems Incorporated\n *  All Rights Reserved.\n *\n * NOTICE:  All information contained herein is, and remains\n * the property of Adobe Systems Incorporated and its suppliers,\n * if any.  The intellectual and technical concepts contained\n * herein are proprietary to Adobe Systems Incorporated and its\n * suppliers and are protected by all applicable intellectual property\n * laws, including trade secret and copyright laws.\n * Dissemination of this information or reproduction of this material\n * is strictly forbidden unless prior written permission is obtained\n * from Adobe Systems Incorporated.\n **************************************************************************/\n\niaw.apps = iaw.apps || {};\niaw.apps.phxs = {\n    /**\n     * Asynchronously retrieves the basic host JSON and passes it to the callback\n     *\n\t * @param mode\t\tstring key for host data mode\n     */\n\tinit: function(receivedHostData, mode) {\n\n\t\tiaw.cepUtil.evalExtendScript('CCXWelcomeXSHost_PHXS.getInitJSON(\"'+mode+'\")', function(supportDataJSON) {\n\n\t\t\tif (!supportDataJSON) return;\n\n\t\t\tvar hostData = null;\n\n\t\t\ttry {\n\t\t\t\tvar jsData = iaw.apps.phxs.buildHostJSON(mode, supportDataJSON);\n\n\t\t\t\thostData = JSON.parse(jsData, iaw.json.fnftDataReceiver);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tiaw.log.exception('Host JSON parse error: ' + err.message);\n\t\t\t}\n\t\t\t// check if our parse went ok\n\t\t\treceivedHostData(hostData);\n\n\t\t\t// make sure that we start the dialog not in preset mode\n\t\t\tiaw.localstorage.setUserItem('fnft.presetMode', false);\n\t\t});\n\n\t},\n\t\n    /**\n     * Asynchronously retrieves the host preset JSON and passes it to the callback\n     *\n\t * @param mode\t\tstring key for host data mode\n     */\n\tinitPresets: function(receivedHostData, mode) {\n\n\t\tvar hostID = iaw.cepUtil.applicationID;\n\n\t\tiaw.cepUtil.evalExtendScript('CCXWelcomeXSHost_'+hostID+'.getPresetJSON(\"'+mode+'\")', function(supportDataJSON) {\n\n\t\t\tif (!supportDataJSON) return;\n\n\t\t\tvar presets;\n\t\t\t\n\t\t\ttry {\n\t\t\t\tvar jsData = iaw.apps.phxs.buildHostPresetJSON(mode, supportDataJSON);\n\n\t\t\t\tpresets = JSON.parse(jsData, iaw.json.fnftDataReceiver);\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\tiaw.log.exception('Host JSON parse error: ' + err.message);\n\t\t\t}\n\n\t\t\t// check if our parse went ok\n\t\t\treceivedHostData(presets);\n\t\t});\n\t},\n\n\t/**\n\t * Builds the host json, minus the preset info\n\t *\n\t * @param mode\t\tstring key for host data mode\n\t * @return JSON representation of the data.\n\t */\n\tbuildHostJSON : function(mode, supportDataJSON) {\n\n\t\tvar supportData = JSON.parse(supportDataJSON);\n\n\t\tvar phsxEnvInfo = supportData.envInfo;\n\n\t\tvar userData = {\n\t\t\thostID                : 'PHXS',\n\t\t\tappVersion            : phsxEnvInfo.appVersion,\n\t\t\tplatform              : phsxEnvInfo.platform,\n\t\t\tdisplayMode           : phsxEnvInfo.displayMode,\n\t\t\tsessionGUID           : phsxEnvInfo.sessionGUID,\n\t\t\tuserTrackingEnabled   : phsxEnvInfo.userTrackingEnabled,\n\t\t\tlanguage              : phsxEnvInfo.locale,\n\t\t\tcountryCode           : phsxEnvInfo.countryCode,\n\t\t\tadobeGUID             : phsxEnvInfo.userGUID,\n\t\t\taccountStatus         : phsxEnvInfo.subscription,\n\t\t\taccountType           : phsxEnvInfo.accountType\n\t\t};\n\n\n\t\t// add presets for 'file new from template' mode\n\t\tif (mode && mode === 'fnft') {\n\t\t\tuserData.fnftSettings = this.getFNFTData(supportData);\n\t\t\tuserData.displayMode = mode;\n\t\t\t\n\t\t\t// Save this for later because it is also needed for preset JSON building\n\t\t\tiaw.store.set('phxsFNFTConfigInfo', supportData.fnftConfigInfo);\n\t\t\t\n\t\t\t// REVISIT: At least at the moment, the core extension expect this to be set\n\t\t\tiaw.store.set('presets', []);\n\t\t}\n\t\telse {\n\t\t\tuserData.firstName = phsxEnvInfo.firstName;\n\t\t\tuserData.lastName = phsxEnvInfo.lastName;\n\t\t\tuserData.tabs = this.getFileTabs(supportData);\n\t\t\tuserData.appStartClockTime = phsxEnvInfo.appStartClockTime;\n\t\t\tuserData.secondsLeftInTrial = phsxEnvInfo.secondsLeftInTrial;\n\t\t\tuserData.dontShowAgain = phsxEnvInfo.startDSA;\n\t\t\tuserData.buttonInfo = phsxEnvInfo.buttonInfo;\n\t\t\tuserData.fnftEnabled =  phsxEnvInfo.fnftEnabled;\n\t\t}\n\t\treturn JSON.stringify(userData);\n\t},\n\n\t/**\n\t * Builds the presets (and recently used templates) for the host application\n\t *\n\t * @param mode\t\tstring key for host data mode\n\t * @return JSON representation of the data.\n\t */\n\tbuildHostPresetJSON : function(mode, supportDataJSON) {\n\n\t\tvar presets = [];\n\t\t\n\t\tif (mode && mode === 'fnft') {\n\t\t\t\n\t\t\tvar supportData = JSON.parse(supportDataJSON);\n\n\t\t\tsupportData.fnftConfigInfo = iaw.store.get('phxsFNFTConfigInfo');\n\n\t\t\tpresets = this.getPresetArray(supportData);\n\t\t}\n\t\t\n\t\treturn JSON.stringify(presets);\n\t},\n\n\t/**\n\t * Gets the File New From Template settings from the preferences.\n\t *\n\t * @return JSON representation of the data.\n\t */\n\tgetFNFTData : function(supportData) {\n\t\tvar configInfo = supportData.fnftConfigInfo,\n\t\t\tenvInfo = supportData.envInfo,\n\t\t\tpixelAspectRatios;\n\n\t\t// Convert pixel ratios list into a slightly more view-friendly format\n\t\tpixelAspectRatios = supportData.pixelScaleFactorList &&\n\t\t\tsupportData.pixelScaleFactorList.pixelScaleFactorList &&\n\t\t\tsupportData.pixelScaleFactorList.pixelScaleFactorList.map(function(item, index) {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: item.name + (index === 0 ? '' : ' (' + iaw.util.roundDecimal(item.value, 2) + ')'),\n\t\t\t\t\tvalue: item.value\n\t\t\t\t};\n\t\t\t}) || [];\n\n\t\tvar settings = {\n\t\t\t// min/max size bounds in pixels for a document\n\t\t\tdocSizeBounds: [300000, 300000],\n\n\t\t\t// units to be displayed in the size(w/h) dropdown\n\t\t\tunits: [\n\t\t\t\t'pixelsUnit',\n\t\t\t\t'inchesUnit',\n\t\t\t\t'centimetersUnit',\n\t\t\t\t'millimetersUnit',\n\t\t\t\t'pointsUnit',\n\t\t\t\t'picasUnit'\n\t\t\t],\n\n\t\t\t// units to be displayed in the resolution dropdown\n\t\t\tresolutionUnits: [\n\t\t\t\t'inchesUnit',\n\t\t\t\t'centimetersUnit'\n\t\t\t],\n\n\t\t\t// color modes to be displayed in the color mode/bit depth dropdown\n\t\t\t// the mode parameter acts as both a setting and as a translation keystring\n\t\t\tcolorModes: [\n\t\t\t\t{ mode: 'bitmap', values: [1] },\n\t\t\t\t{ mode: 'grayscale', values: [8, 16, 32] },\n\t\t\t\t{ mode: 'RGB', values: [8, 16, 32] },\n\t\t\t\t{ mode: 'CMYK', values: [8, 16] },\n\t\t\t\t{ mode: 'Lab', values: [8, 16] }\n\t\t\t],\n\n\t\t\t// background modes to be set in the background dropdown\n\t\t\t// value acts both a setting and as a translation keystring\n\t\t\tbackgroundValues: [\n\t\t\t\t'white',\n\t\t\t\t'black',\n\t\t\t\t'background',\n\t\t\t\t'transparent',\n\t\t\t\t'custom'\n\t\t\t],\n\n\t\t\t// current background color of photoshop\n\t\t\tbackgroundColor: configInfo.backgroundColor,\n\n\t\t\t// conversion constant from points to picas from preferences\n\t\t\tpointsPerInch: configInfo.pointsPerInch,\n\n\t\t\t// default document name\n\t\t\tdefaultDocumentName: configInfo.defaultNewDocName || null,\n\n\t\t\t// List of valid color profiles\n\t\t\tcolorProfileLists: envInfo.colorProfileLists,\n\n\t\t\t// Information about current color settings, including workingProfile and policy\n\t\t\tcolorSettings: configInfo.colorSettings || {},\n\n\t\t\t// starting attributes\n\t\t\tdefaultPresetSettings: configInfo.startingPreset || null,\n\n\t\t\t// list of valid pixel aspect ratios\n\t\t\tpixelAspectRatios: pixelAspectRatios\n\n\t\t};\n\n\t\treturn settings;\n\t},\n\n\t/**\n\t * Build out the list of tabs.\n\t *\n\t * @return an array containing the list of tab structures.\n\t */\n\tgetFileTabs : function(supportData) {\n\n\t\tvar tabsArray   = [];\n\t\tvar recentFiles = {\n\t\t\t'type' : 'recentfile',\n\t\t\t'label' : 'listview_recentfiles_tab_label',\n\t\t\t'listViewEnabled' : 'true',\n\t\t\t'thumbnailViewEnabled' : 'true',\n\t\t\t'list' : supportData.recentFiles.list\n\t\t};\n\t\ttabsArray.push( recentFiles );\n\n\t\treturn tabsArray;\n\t},\n\n\t/**\n\t * Build the list of preset file types.\n\t *\n\t * @return array object containing the list of presets.\n\t */\n\tgetPresetArray : function(supportData) {\n\n\t\tvar presetArray = [];\n\n\t\t// feed in the MRU presets\n\t\tvar mruArray = this.getRecentlyUsedPresets(supportData);\n\n\t\t// now feed in the MRU templates\n\t\t/*\n\t\tmruArray = [\n\t\t\t{\n\t\t\t\t'elementRef': 'cloud-asset://cc-api-storage.adobe.io/assets/adobe-libraries/1d898ff1-7e41-44f0-8fe1-7b429bbd34fd;node=b943f298-127a-4362-8d1f-733a70f4c1fc',\n\t\t\t\t'lastUsedTime': 1460161754340\n\t\t\t},\n\t\t\t{\n\t\t\t\t'elementRef': 'cloud-asset://cc-api-storage.adobe.io/assets/adobe-libraries/1d898ff1-7e41-44f0-8fe1-7b429bbd34fd;node=fea9a462-48f2-41aa-93ec-8d33b05fe225',\n\t\t\t\t'lastUsedTime': 1460161700176\n\t\t\t},\n\t\t\t{\n\t\t\t\t'elementRef': 'cloud-asset://cc-api-storage.adobe.io/assets/adobe-libraries/1d898ff1-7e41-44f0-8fe1-7b429bbd34fd;node=6fc72153-fff0-4e04-868f-8eae89444d7f',\n\t\t\t\t'lastUsedTime': 1460161706897\n\t\t\t}\n\t\t];\n\t\t*/\n\n\t\tvar mruTemplates = supportData.mruTemplates.recentlyUsedTemplates;\n\n\t\tif (mruTemplates) {\n\n\t\t\t// Fixup MRU templates\n\t\t\tfor (var mruIndex = 0; mruIndex < mruTemplates.length; ++mruIndex) {\n\t\t\t\tmruTemplates[mruIndex].template_category = 'needslookup';\t// eslint-disable-line camelcase\n\t\t\t}\n\n\t\t\t// Combine MRU templates and MRU presets\n\t\t\tmruArray = mruArray.concat(mruTemplates);\n\t\t}\n\n\t\t// Sort MRU based on timestamp, newest first\n\t\tmruArray.sort(function(a, b) {\n\t\t\tif (a.lastUsedTime > b.lastUsedTime) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\telse if (a.lastUsedTime < b.lastUsedTime) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\n\t\t// Add all the MRU to the main list\n\t\tpresetArray = presetArray.concat(mruArray);\n\n\t\tvar psPresets = supportData.presets;\n\n\t\t// parse out the presets into the format we need\n\t\tif (psPresets.sections) {\n\t\t\t\n\t\t\t// This maps Photoshop preset sections to the relevant ccx template categories.\n\t\t\t// It is opt-in order of items in the 'sections' arrays is important.\n\t\t\t// MRU are a special case;  they aren't in psPresets but get added above instead,\n\t\t\t// and the clipboard gets artificially forced in front of them.\n\t\t\t//\n\t\t\t// Yes, the loops are quadratic, but the number of sections is small, and unmappped\n\t\t\t// sections get skipped, it enables mapping a single section to multiple categories\n\t\t\t// if desired, and it ensures that the extension controls the ordering rather than\n\t\t\t// being dependent on the order of sections coming from Photoshop.\n\t\t\tvar tmpCatToSec = [\n\t\t\t\t{ category : 'recent',\tsections : ['clipboard'/*, 'mru'*/] },\n\t\t\t\t{ category : 'saved',   sections : ['user'] },\n\t\t\t\t{ category : 'photo',\tsections : ['default', 'photo'] },\n\t\t\t\t{ category : 'print',\tsections : ['uspaper', 'europaper'] },\n\t\t\t\t{ category : 'mobile',\tsections : ['mobile', 'iconography'] },\n\t\t\t\t{ category : 'film',\tsections : ['video'] },\n\t\t\t\t{ category : 'web',\t\tsections : ['web'] },\n\t\t\t\t{ category : 'art',\t\tsections : ['artillustration'] }\n\t\t\t];\n\t\t\t\n\t\t\t// Loop through each category, and each section in each category\n\t\t\tfor (var catIndex = 0; catIndex < tmpCatToSec.length; ++catIndex) {\n\t\t\t\t\n\t\t\t\tfor (var sectIndex = 0; sectIndex < tmpCatToSec[catIndex].sections.length; ++sectIndex) {\n\n\t\t\t\t\t// Find the current section in the psPresets array\n\t\t\t\t\tvar section = tmpCatToSec[catIndex].sections[sectIndex];\n\t\t\t\t\t\n\t\t\t\t\tfor (var index = 0; index < psPresets.sections.length; ++index) {\n\t\t\t\t\t\tif (psPresets.sections[index].section === section && psPresets.sections[index].presets) {\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// Add the presets from the found section into the ccx preset array\n\t\t\t\t\t\t\tthis.addPsPresetListToCCXPresetEntryList(psPresets.sections[index].presets, tmpCatToSec[catIndex].category, supportData.fnftConfigInfo, presetArray);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn presetArray;\n\t},\n\n\t/**\n\t * Get the list of most recently used (MRU) PS Presets\n\t *\n\t * @return An array containing the list of MRU presets.\n\t */\n\tgetRecentlyUsedPresets : function(supportData) {\n\n\t\tvar mruArray = [];\n\n\t\tif (supportData.mruPresets.mru) {\n\t\t\tthis.addPsPresetListToCCXPresetEntryList(supportData.mruPresets.mru, 'recent', supportData.fnftConfigInfo, mruArray);\n\t\t}\n\t\treturn mruArray;\n\t},\n    \n    \n\n\t/**\n\t * Get a preset thumbnail based on category and title.\n\t *\n\t * @return The filename for the thumbnail\n\t */\n\tthumbnailForPreset : function(category, title) {\n\n\t\tswitch (category) {\n\t\t\tcase 'photo':\n\t\t\t\treturn 'SP_PresetPhotoDoc.png';\n\n\t\t\tcase 'europaper':\n\t\t\tcase 'uspaper':\n\t\t\t\treturn 'SP_PrintDoc.png';\n\n\t\t\tcase 'mobile':\n\t\t\t\t// Per XD we are dropping per-device icons for initial release (out of scope).\n\t\t\t\t// Note that this code is not very localization friendly. 'iPad' and 'Surface'\n\t\t\t\t// probably don't get localized, but 'Mobile Design' will, so we can't match\n\t\t\t\t// against it with an unlocalized string.\n\t\t\t/*\tif (title.indexOf('iPad') >= 0) {\n\t\t\t\t\treturn 'SP_PresetTabletApp.png';\n\t\t\t\t}\n\t\t\t\telse if (title.indexOf('Surface') >= 0) {\n\t\t\t\t\treturn 'SP_PresetSurfacePro.png';\n\t\t\t\t}\n\t\t\t\telse if (title.indexOf('Mobile Design') >= 0) {\n\t\t\t\t\treturn 'SP_PresetMobileAppDoc.png';\n\t\t\t\t}*/\n\t\t\t\treturn 'SP_PresetMobilePhoneDoc.png';\n\n\t\t\tcase 'iconography':\n\t\t\t\treturn 'SP_PresetIconographyDoc.png';\n\n\t\t\tcase 'video':\n\t\t\t\treturn 'SP_PresetFilmVideo.png';\n\n\t\t\tcase 'web':\n\t\t\t\treturn 'SP_PresetWebDoc.png';\n\n\t\t\tcase 'artillustration':\n\t\t\t\treturn 'SP_PresetArt.png';\n\n\t\t\tcase 'clipboard':\n\t\t\t\treturn 'SP_PresetClipboard.png';\n\n\t\t\tcase 'default':\n\t\t\t\treturn 'CCX_Start_DefaultThumb_Ps_Ai_Id.png';\n\n\t\t\tcase 'last':\n\t\t\tdefault:\n\t\t\t\t// Return custom below\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn 'SP_PresetCustom.png';\n\t},\n\n\t/**\n\t * Converts a Photoshop preset (from the JSON) into a ccx preset entry\n\t * for use in the core extension.\n\t *\n\t * @return A ccx appropriate preset\n\t */\n\tconvertPsPresetToCCXPresetEntry : function(psPreset, category, configInfo) {\n\n\t\t// skip the separator presets\n\t\tif (psPreset.name === 'separator') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Start with the psPreset itself; all unknown data needs to be\n\t\t// round-tripped back to Photoshop.\n\t\tvar presetEntry = psPreset;\n\n\t\t// Add fields that are needed for ccx\n\t\tpresetEntry.isPreset = true;\n\t\tpresetEntry.id = '';\n\t\tpresetEntry.title = presetEntry.name;\n\t\tpresetEntry.thumbnail_url = '';\t\t\t\t// eslint-disable-line camelcase\n\t\tpresetEntry.mime_type = 'image/photoshop';\t// eslint-disable-line camelcase\n\t\tpresetEntry.price_prompt = '';\t\t\t\t// eslint-disable-line camelcase\n\t\tpresetEntry.template_category = 'error';\t// eslint-disable-line camelcase\n\t\tpresetEntry.previews = [];\n\n\t\t// adjust resolution to value\n\t\tif (presetEntry.resolution === 'screen') {\n\t\t\tpresetEntry.resolution = configInfo.screenPresetResolution.value;\n\t\t\tpresetEntry.resolutionUnits = configInfo.screenPresetResolution.units;\n\t\t}\n\t\telse if (presetEntry.resolution === 'print') {\n\t\t\tpresetEntry.resolution = configInfo.printPresetResolution.value;\n\t\t\tpresetEntry.resolutionUnits = configInfo.printPresetResolution.units;\n\t\t}\n\n\t\t// set category\n\t\tpresetEntry.template_category = category;\t// eslint-disable-line camelcase\n\n\t\t// Set thumbnail\n\t\tpresetEntry.thumbnail_url = this.thumbnailForPreset(presetEntry.group, presetEntry.title);\t// eslint-disable-line camelcase\n\n\t\treturn presetEntry;\n\t},\n\n\t/**\n\t * Converts a list of Photoshop preset (from the JSON) into ccx preset entries\n\t * for use in the core extension and adds them to the provided array.\n\t */\n\taddPsPresetListToCCXPresetEntryList : function(psPresets, category, configInfo, ccxPresetArray) {\n\n\t\tfor (var presetIndex = 0; presetIndex < psPresets.length; ++presetIndex) {\n\n\t\t\t// skip the separator presets\n\t\t\tif (psPresets[presetIndex].name !== 'separator') {\n\n\t\t\t\tvar presetEntry = this.convertPsPresetToCCXPresetEntry(psPresets[presetIndex], category, configInfo);\n\n\t\t\t\tif (presetEntry) {\n\t\t\t\t\t// add to the preset array\n\t\t\t\t\tif (presetEntry.group !== 'clipboard') {\n\t\t\t\t\t\tccxPresetArray.push(presetEntry);\n\t\t\t\t\t}\n\t\t\t\t\telse { // clipboard always first\n\t\t\t\t\t\tccxPresetArray.unshift(presetEntry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Launch native photoshop color picker and return a promise of a new color object.\n\t * May resolve with null if dialog is canceled\n\t *\n\t * @param {object} color to initialize picker with\n\t * @return {Promise.<?object>}\n\t */\n\tpromptForCustomColor : function(color) {\n\t\tvar _color = color,\n\t\t\tdialogContext = iaw.i18n.getLocalizedString('newdoc_color-picker_context'),\n\t\t\tcolorJSON,\n\t\t\tserializedParams;\n\n\t\t// failsafe in case no initial color is available\n\t\tif (!(color instanceof Object)) {\n\t\t\t_color = { 'red': 255, 'grain': 255, 'blue': 255, 'type': 'RGBColor' };\n\t\t}\n\n\t\t// prep for sending as string param to extendscript eval\n\t\tcolorJSON = JSON.stringify(_color).replace(/\"/g, '\\\\\"');\n\t\tserializedParams = '\"'+ colorJSON + '\", \"' + dialogContext + '\"';\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tiaw.cepUtil.evalExtendScript('CCXWelcomeXSHost_PHXS.openColorPicker(' + serializedParams + ')', function(resultJSON) {\n\t\t\t\t\tif (resultJSON) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar result = JSON.parse(resultJSON);\n\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t\treject(new Error('Failed to parse result from openColorPicker', e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// this might just mean the dialog was canceled?\n\t\t\t\t\tresolve(null);\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treject(new Error('Failed to get color via color picker', e));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Use photoshop extendscript utility to convert any photoshop color object to RGB.\n\t * Returns a promise of a new color object\n\t *\n\t * @param {object} color\n\t * @return {Promise.<object>} RGBColor type color\n\t */\n\tconvertColorToRGB : function(color) {\n\t\tif (!color) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tresolve({ 'red': 255, 'grain': 255, 'blue': 255, 'type': 'RGBColor' });\n\t\t\t});\n\t\t}\n\n\t\tvar colorJSON = JSON.stringify(color).replace(/\"/g, '\\\\\"');\n\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\ttry {\n\t\t\t\tiaw.cepUtil.evalExtendScript('CCXWelcomeXSHost_PHXS.convertColorToRGB(\"'+ colorJSON +'\")', function(resultJSON) {\n\t\t\t\t\tif (resultJSON) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvar result = JSON.parse(resultJSON);\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\t\treject(new Error('Failed to parse result from convertColorToRGB', e));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treject(new Error('convertColorToRGB Failed to convert color, empty result'));\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treject(new Error('convertColorToRGB Failed to convert color', e));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Convert a RGBColor object from Photoshop into CSS-compatible rgb format\n\t *\n\t * @param {!object} obj\n\t * @return {string} of format \"rgb(100, 100, 100)\"\n\t */\n\trgbFormat: function(obj) {\n\t\treturn 'rgb(' +\n\t\t\tMath.round(obj.red) + ', ' +\n\t\t\tMath.round((obj.grain !== undefined ? obj.grain : obj.green)) + ', ' +\n\t\t\tMath.round(obj.blue) + ')';\n\t}\n\n};\n"],"sourceRoot":"/source/"}